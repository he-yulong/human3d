"""

"""
import sys

sys.path.append('/Users/mac/.virtualenvs/py2_work/lib/python2.7/site-packages')
import maya.cmds as cmds
import numpy as np
import cv2
from scipy.spatial.transform import Rotation

import socket
import json
server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server.bind(('0.0.0.0', 8888))

def rectify_pose(pose):
    """
    Rectify "upside down" people in global coord

    Args:
        pose (72,): Pose.

    Returns:
        Rotated pose.
    """
    pose = pose.copy()
    R_mod = cv2.Rodrigues(np.array([np.pi, 0, 0]))[0]
    R_root = cv2.Rodrigues(pose[:3])[0]
    new_root = R_root.dot(R_mod)
    pose[:3] = cv2.Rodrigues(new_root)[0].reshape(3)
    return pose


j_names = {0: 'Pelvis', 1: 'L_Hip', 2: 'R_Hip', 3: 'Spine1', 4: 'L_Knee',
           5: 'R_Knee', 6: 'Spine2', 7: 'L_Ankle', 8: 'R_Ankle', 9: 'Spine3',
           10: 'L_Foot', 11: 'R_Foot', 12: 'Neck', 13: 'L_Collar', 14: 'R_Collar',
           15: 'Head', 16: 'L_Shoulder', 17: 'R_Shoulder', 18: 'L_Elbow', 19: 'R_Elbow',
           20: 'L_Wrist', 21: 'R_Wrist', 22: 'L_Hand', 23: 'R_Hand', }

# theta = np.array([[0.65375429, -0.12651032, 0.69847161, 1.20795631, -0.68683738, 3.06554484,
#                    -0.2044993, 0.05865749, 0.31660637, -0.33618885, -0.312289, -0.3469328,
#                    0.35565928, 0.06655198, -0.02633067, 0.60488713, -0.21113533, -0.17966062,
#                    0.66467255, -0.12848833, 0.13370527, 0.13724093, -0.07187334, -0.0362551,
#                    -0.16843867, -0.09506486, -0.03108483, -0.14844014, -0.20193914, 0.18179893,
#                    -0.11232163, -0.01554313, -0.0188742, -0.19961238, 0.36859128, -0.07566048,
#                    -0.0170522, -0.04483943, -0.14284033, 0.03346763, -0.07012553, -0.09445562,
#                    -0.1719825, -0.46976602, -0.11803561, -0.11201438, 0.51989555, 0.03870144,
#                    -0.20713428, -0.13355994, 0.06921966, -0.19867136, -0.42817655, -0.37556809,
#                    -0.29381952, 0.56291795, 0.33206582, -0.08018727, -1.6725651, 1.09471381,
#                    0.30702329, 1.81851137, -1.26697814, 0.06094411, -0.16671088, 0.37845773,
#                    1.04654193, 0.04094768, -0.63187224, -0.07983252, -0.08654476, -0.12918299,
#                    0.01232874, 0.29337054, 0.26530373, -1.14819586, 0.94468343, 0.6564284,
#                    0.7488265, -1.15599048, 1.71598029, -0.47796577, -0.10777956, 0.06191299,
#                    1.85676169]])
import time
frame_id = 0
while True:
    time.sleep(0.01)
    data = server.recv(1024*4)
    data = json.loads(data.decode())
    if data == '#STOP#' or frame_id >= 2000:
        break
    frame_id += 1
    theta = np.array(data)
    # camera = theta[:3]
    # betas = theta[75:]
    # real_theta = theta[3:75]
    pose = theta[:, 3:75]  # This is the 1 x 72 pose vector of SMPL, which is the rotation of 24 joints in axis angle format
    pose[0, :] = rectify_pose(pose[0, :])

    """
    [array([[-0.72058947,  0.05784009,  0.69094525],
           [-0.34712487, -0.89273241, -0.28728586],
           [ 0.60021258, -0.44685945,  0.66337131]]), array([[ 0.94878537, -0.31490965,  0.02526309],
           [ 0.30305898,  0.92982729,  0.20874976],
           [-0.08922762, -0.19040251,  0.97764273]]), array([[ 0.89402787,  0.37917534, -0.23862154],
           [-0.27705064,  0.88648995,  0.37064606],
           [ 0.35207544, -0.26525766,  0.89759749]]), array([[ 0.99746673,  0.03746255,  0.06047043],
           [-0.01405119,  0.93710103, -0.34877533],
           [-0.06973292,  0.34704211,  0.93525349]]), array([[ 0.96296902,  0.10515872, -0.24825854],
           [-0.22822874,  0.80815451, -0.54295297],
           [ 0.14353501,  0.57950663,  0.802228  ]]), array([[ 0.98347834, -0.16437741, -0.07583159],
           [ 0.0823103 ,  0.77914321, -0.62141844],
           [ 0.16123082,  0.60490985,  0.77980042]]), array([[ 0.99676672,  0.03118074, -0.07405307],
           [-0.04102391,  0.98994648, -0.13536247],
           [ 0.06908788,  0.13796275,  0.98802487]]), array([[ 0.99501418,  0.03886713, -0.09184842],
           [-0.02290567,  0.98537792,  0.16883624],
           [ 0.09706759, -0.16589061,  0.98135528]]), array([[ 0.96337883, -0.16403955, -0.21211378],
           [ 0.19377672,  0.97267667,  0.1278698 ],
           [ 0.18534242, -0.16428977,  0.96884316]]), array([[ 0.99970142,  0.01970461, -0.0144501 ],
           [-0.01796071,  0.99352095,  0.11222094],
           [ 0.01656775, -0.1119279 ,  0.99357821]]), array([[ 0.93027184,  0.03715846,  0.36498432],
           [-0.10962816,  0.9775576 ,  0.17989663],
           [-0.35010851, -0.20736533,  0.91346792]]), array([[ 0.98881422,  0.142682  , -0.04345438],
           [-0.14191884,  0.98967249,  0.02018413],
           [ 0.04588551, -0.01379136,  0.9988515 ]]), array([[ 0.99308889,  0.09304829, -0.07152945],
           [-0.0953923 ,  0.99498528, -0.0300765 ],
           [ 0.06837219,  0.036692  ,  0.99698493]]), array([[ 0.8852537 ,  0.15242073, -0.4394244 ],
           [-0.07339231,  0.97871957,  0.19162874],
           [ 0.45928145, -0.13738969,  0.87760163]]), array([[ 0.86729503, -0.06532776,  0.49348923],
           [ 0.00845885,  0.99314232,  0.11660527],
           [-0.4977226 , -0.09695682,  0.86189999]]), array([[ 0.98874685, -0.05470905, -0.13923574],
           [ 0.08222314,  0.97628197,  0.20028199],
           [ 0.1249761 , -0.20947658,  0.96979407]]), array([[ 0.84266539,  0.39446245, -0.36648931],
           [-0.31194428,  0.91244301,  0.26483679],
           [ 0.43886877, -0.10884455,  0.89193445]]), array([[ 0.7954115 , -0.38358822,  0.46923408],
           [ 0.22514914,  0.90583601,  0.35884395],
           [-0.56269744, -0.17978095,  0.80687694]]), array([[-0.41439408, -0.44996285, -0.79108216],
           [ 0.54490898,  0.57353441, -0.6116637 ],
           [ 0.72893878, -0.68453759,  0.00751953]]), array([[-0.58794005,  0.62547055,  0.5129455 ],
           [-0.26449825,  0.45061485, -0.85263529],
           [-0.76443912, -0.63697162, -0.09949865]]), array([[ 0.91572655, -0.37253835, -0.1505326 ],
           [ 0.36252539,  0.92759143, -0.0902745 ],
           [ 0.17326346,  0.02809487,  0.98447471]]), array([[ 0.8233116 ,  0.50456661, -0.25994335],
           [-0.46679675,  0.34138892, -0.81581518],
           [-0.32289132,  0.79301081,  0.51659951]]), array([[ 0.98794163,  0.13197196, -0.08096137],
           [-0.12508045,  0.98849859,  0.08500248],
           [ 0.09124814, -0.0738508 ,  0.99308602]]), array([[ 0.92278939, -0.25664816,  0.28738729],
           [ 0.2602181 ,  0.96518884,  0.02640146],
           [-0.28415889,  0.05042038,  0.95745053]])]
    """
    rotations = [cv2.Rodrigues(aa)[0] for aa in pose.reshape(-1, 3)]

    cmds.currentTime(0)
    for idx, item in enumerate(rotations):
        x, y, z = Rotation.from_dcm(item).as_euler('xyz', degrees=True)
        print (x, y, z)
        key = 'm_avg_' + j_names[idx]
        cmds.setAttr('{}.rx'.format(key), x)
        cmds.setKeyframe('{}.rx'.format(key))
        cmds.setAttr('{}.ry'.format(key), y)
        cmds.setKeyframe('{}.ry'.format(key))
        cmds.setAttr('{}.rz'.format(key), z)
        cmds.setKeyframe('{}.rz'.format(key))

    
    print rotations

    # for i in range(10):
    #     cmds.currentTime(i)
    #     cmds.setAttr('m_avg_root.rx', i * 10, )
    #     cmds.setKeyframe('m_avg_root.rx')
